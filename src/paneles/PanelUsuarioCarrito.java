/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package paneles;

import controladores.ControladorVistaUsuarioCompra;
import javax.swing.JOptionPane;
import modelo.Carrito;
import modelo.Producto;
import modelo.ProductoVendido;
import modelo.Usuario;
import modelo.Venta;

/**
 *
 * @author Pixels
 */
public class PanelUsuarioCarrito extends javax.swing.JPanel {
    ControladorVistaUsuarioCompra controlador;
    Usuario usuario;
    String idProducto;
    Carrito carrito;
    int cantidad;

    /**
     * Creates new form panelUsuarioCarrito
     * @param usuario
     */
    public PanelUsuarioCarrito(Usuario usuario) {
        initComponents();
        this.usuario = usuario;
        controlador = new ControladorVistaUsuarioCompra();
        carrito = controlador.buscarCarrito(usuario.getUser());
        carrito.validarProductosCarrito();
        restaurarPanel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblProductosCarrito = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableProductos = new javax.swing.JTable();
        btnComprarTodo = new javax.swing.JButton();
        btnComprar = new javax.swing.JButton();
        btnDetalles = new javax.swing.JButton();
        btnQuitarCarrito = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        lblStock = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 700, -1));

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel1.setText("Productos en tu carrito:");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        lblProductosCarrito.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        lblProductosCarrito.setText("0");
        add(lblProductosCarrito, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 10, 50, -1));

        tableProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, "", null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nombre", "Precio", "id", "Cantidad"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableProductos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableProductosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableProductos);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 420, 250));

        btnComprarTodo.setText("Comprar todo");
        btnComprarTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnComprarTodoActionPerformed(evt);
            }
        });
        add(btnComprarTodo, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 260, -1, -1));

        btnComprar.setText("Comprar");
        btnComprar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnComprarActionPerformed(evt);
            }
        });
        add(btnComprar, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 230, -1, -1));

        btnDetalles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Ojo.png"))); // NOI18N
        btnDetalles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetallesActionPerformed(evt);
            }
        });
        add(btnDetalles, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 90, 40, 30));

        btnQuitarCarrito.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/RemoverCarrito.png"))); // NOI18N
        btnQuitarCarrito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitarCarritoActionPerformed(evt);
            }
        });
        add(btnQuitarCarrito, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 130, 40, 40));

        jLabel2.setText("Stock:");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 10, -1, -1));

        lblStock.setText("0");
        add(lblStock, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 10, 30, -1));

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel3.setText("Total:");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 190, -1, -1));

        lblTotal.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        lblTotal.setText("0");
        add(lblTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 190, 100, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void tableProductosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableProductosMouseClicked
        // TODO add your handling code here:
        int seleccion = tableProductos.rowAtPoint(evt.getPoint());
        idProducto = tableProductos.getValueAt(seleccion, 2).toString();
        cantidad = Integer.parseInt(tableProductos.getValueAt(seleccion, 3).toString());
        
        Producto aux = controlador.buscarProducto(idProducto);
        if(aux!=null){
            lblStock.setText(Integer.toString(aux.getStock()));
        }
        mostrarPrecioTotal();
    }//GEN-LAST:event_tableProductosMouseClicked

    private void btnDetallesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetallesActionPerformed
        // TODO add your handling code here:
        Producto aux = controlador.buscarProducto(idProducto);
        if(aux!=null){
            String disponibilidad = "NO";
            if(aux.isDisponible()){
                disponibilidad = "SI";
            }
            JOptionPane.showMessageDialog(this, "Id: "+ aux.getId() + "\nNombre: " + aux.getNombre()
                +"\nDescripcion: "+aux.getDesc() + "\nPrecio: $"+aux.getPrecio() + "\nCategoría: "+aux.getCategoria().getNombre()
                +"\nStock: "+aux.getStock()+"\nDisponible: "+disponibilidad + "\nVendedor: " + aux.getUsuario().getUser()
                +"\nFecha publicación: "+aux.getFechaPublicacion());
        }else{
            JOptionPane.showMessageDialog(this, "Selecciona un producto para mostrar detalles");
        }
    }//GEN-LAST:event_btnDetallesActionPerformed

    private void btnQuitarCarritoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitarCarritoActionPerformed
        // TODO add your handling code here:
        carrito.eliminar(idProducto);
        restaurarPanel();
    }//GEN-LAST:event_btnQuitarCarritoActionPerformed

    private void btnComprarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnComprarActionPerformed
        // TODO add your handling code here:
        Producto p = carrito.buscar(idProducto);
        if (p != null) {
            if (cantidad <= p.getStock()) {
                if (cantidad > 0) {
                    int i = JOptionPane.showConfirmDialog(this, "Está seguro de continuar con la compra?\n\nProducto: "
                            + p.getNombre() + "\nDescripción: " + p.getDesc() + "\nCategoría: " + p.getCategoria().getNombre()
                            + "\nCantidad: " + cantidad + "\nTotal a pagar: $" + (p.getPrecio() * cantidad));
                    if (i == 0) {
                        ProductoVendido pVendido = new ProductoVendido(p.getNombre(), p.getPrecio(), p.getDesc(), p.getCategoria(), cantidad);
                        Venta venta = new Venta(p.getUsuario(), usuario, pVendido);
                        boolean respuesta = controlador.registrarVenta(venta);
                        if (respuesta) {
                            p.setStock(p.getStock() - cantidad);
                            p.diponibilidad();
                            carrito.eliminar(idProducto);
                            JOptionPane.showMessageDialog(this, "Gracias por tu compra " + usuario.getNombre() + "\n\nProducto: " + pVendido.getNombre() + "\nDescripción: " + pVendido.getDesc()
                                    + "\nCategoría: " + pVendido.getCategoria().getNombre() + "\nCantidad: " + pVendido.getCantidad() + "\nVendedor: "+venta.getVendedor().getNombre()
                                    +"\nTotal: $" + venta.getPrecioTotal() + "\n\nId de compra: " + venta.getId() + "\nFecha: " + venta.getFechaVenta());
                            restaurarPanel();
                        } else {
                            JOptionPane.showMessageDialog(this, "No se pudo efectuar la compra");
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "La cantidad debe ser mayor a 0");
                }
            } else {
                JOptionPane.showMessageDialog(this, "La cantidad supera al stock del producto");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecciona el producto que deseas comprar");
        }
    }//GEN-LAST:event_btnComprarActionPerformed

    private void btnComprarTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnComprarTodoActionPerformed
        // TODO add your handling code here:
        String productos = "";
        double total = 0;
        String fecha = "";
        int productosCarrito = carrito.obtenerCantidadProductos();
        if (!carrito.getCarrito().isEmpty()) {
            for (int i = 0; i < productosCarrito; i++) {
                int cant = Integer.parseInt(tableProductos.getValueAt(i, 3).toString());
                Producto p = carrito.obtenerProductoIndex(i);
                productos += "\n\n-" + p.getNombre() + "\nCantidad: " + cant + "\nPrecio: $" + (p.getPrecio() * cant);
                total += (p.getPrecio() * cant);
            }
            int j = JOptionPane.showConfirmDialog(this, "Está seguro de comprar los siguientes productos?" + productos
                    + "\n\nTotal a pagar: $" + total);
            if (j == 0) {
                productos = "";
                total = 0;
                for (int i = 0; i < productosCarrito; i++) {
                    int cant = Integer.parseInt(tableProductos.getValueAt(i, 3).toString());
                    Producto p = carrito.obtenerProductoIndex(i);
                    if (p != null) {
                        if (cant > 0 && cant <= p.getStock()) {
                            ProductoVendido pVendido = new ProductoVendido(p.getNombre(), p.getPrecio(), p.getDesc(), p.getCategoria(), cant);
                            Venta venta = new Venta(p.getUsuario(), usuario, pVendido);
                            boolean respuesta = controlador.registrarVenta(venta);
                            if (respuesta) {
                                productos += "\n\n-" + pVendido.getNombre() + "\nCantidad: " + cant + "\nPagado: $" + venta.getPrecioTotal();
                                total += venta.getPrecioTotal();
                                fecha = venta.getFechaVenta();
                                p.setStock(p.getStock() - cant);
                                p.diponibilidad();
                            } else {
                                JOptionPane.showMessageDialog(this, "No se pudo comprar el producto " + p.getNombre().toUpperCase());
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "No se pudo comprar el/la " + p.getNombre()
                                    + ", debido a que la cantidad deseada supera el stock del producto");
                        }
                    }
                }
                JOptionPane.showMessageDialog(this, "Gracias por tu compra: " + usuario.getNombre() + "\n\nHas comprado los "
                        + "siguientes productos: " + productos + "\n\nTotal pagado: $" + total + "\nFecha: " + fecha);
                carrito.eliminarTodo();
                restaurarPanel();
            }
        } else {
            JOptionPane.showMessageDialog(this, "No tienes productos en tu carrito");
        }
    }//GEN-LAST:event_btnComprarTodoActionPerformed


    private void mostrarTabla(){
        Carrito aux = controlador.buscarCarrito(usuario.getUser());
        
        tableProductos.setModel(new javax.swing.table.DefaultTableModel(
            aux.construirMatrisCarrito(),
            new String [] {
                "Nombre", "Precio", "id", "Cantidad"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
    }
    private void restaurarPanel(){
        lblProductosCarrito.setText(Integer.toString(carrito.obtenerCantidadProductos()));
        mostrarTabla();
        mostrarPrecioTotal();
    }
    private void mostrarPrecioTotal(){
        double total = 0;
        for(int i = 0; i < carrito.obtenerCantidadProductos(); i++){
            double precio = Double.parseDouble(tableProductos.getValueAt(i, 1).toString());
            int cant = Integer.parseInt(tableProductos.getValueAt(i, 3).toString());
            total += precio * cant;
        }
        lblTotal.setText(Double.toString(total));
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnComprar;
    private javax.swing.JButton btnComprarTodo;
    private javax.swing.JButton btnDetalles;
    private javax.swing.JButton btnQuitarCarrito;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblProductosCarrito;
    private javax.swing.JLabel lblStock;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JTable tableProductos;
    // End of variables declaration//GEN-END:variables
}
