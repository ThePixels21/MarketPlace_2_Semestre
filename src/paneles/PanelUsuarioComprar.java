/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package paneles;

import controladores.ControladorVistaUsuarioCompra;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import modelo.Carrito;
import modelo.Producto;
import modelo.Usuario;
import org.netbeans.lib.awtextra.AbsoluteConstraints;

/**
 *
 * @author Pixels
 */
public class PanelUsuarioComprar extends javax.swing.JPanel {
    ControladorVistaUsuarioCompra controlador;
    Usuario usuario;
    String idProducto;
    

    /**
     * Creates new form panelUsuarioCompras
     * @param usuario
     */
    public PanelUsuarioComprar(Usuario usuario) {
        initComponents();
        this.controlador = new ControladorVistaUsuarioCompra();
        this.usuario = usuario;
        lblBienvenida.setText(usuario.getUser());
        mostrarTabla();
        llenarBoxCategorias();
        btnRemoverFiltro.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelAbsoluto = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblBienvenida = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableProductos = new javax.swing.JTable();
        btnDetalles = new javax.swing.JButton();
        btnAniadirCarrito = new javax.swing.JButton();
        btnCarrito = new javax.swing.JButton();
        btnFiltrar = new javax.swing.JButton();
        txtPrecioMinimo = new javax.swing.JTextField();
        txtPrecioMaximo = new javax.swing.JTextField();
        cboxCategoria = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnRemoverFiltro = new javax.swing.JButton();

        panelAbsoluto.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel1.setText("Bienvenido(a): ");
        panelAbsoluto.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        lblBienvenida.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        lblBienvenida.setText("user");
        panelAbsoluto.add(lblBienvenida, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 10, -1, -1));

        tableProductos.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        tableProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nombre", "Precio", "id"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableProductos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableProductosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableProductos);

        panelAbsoluto.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, -1, 250));

        btnDetalles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/ojo.png"))); // NOI18N
        btnDetalles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetallesActionPerformed(evt);
            }
        });
        panelAbsoluto.add(btnDetalles, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 100, 40, 30));

        btnAniadirCarrito.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/AñadirCarrito.png"))); // NOI18N
        btnAniadirCarrito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAniadirCarritoActionPerformed(evt);
            }
        });
        panelAbsoluto.add(btnAniadirCarrito, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 100, 30, 30));

        btnCarrito.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/carrito.png"))); // NOI18N
        btnCarrito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCarritoActionPerformed(evt);
            }
        });
        panelAbsoluto.add(btnCarrito, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 10, 50, 50));

        btnFiltrar.setText("Filtrar");
        btnFiltrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFiltrarActionPerformed(evt);
            }
        });
        panelAbsoluto.add(btnFiltrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 270, -1, -1));

        txtPrecioMinimo.setText("Mínimo");
        txtPrecioMinimo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtPrecioMinimoMouseClicked(evt);
            }
        });
        panelAbsoluto.add(txtPrecioMinimo, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 210, 180, -1));

        txtPrecioMaximo.setText("Máximo");
        txtPrecioMaximo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtPrecioMaximoMouseClicked(evt);
            }
        });
        panelAbsoluto.add(txtPrecioMaximo, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 240, 180, -1));

        cboxCategoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar" }));
        panelAbsoluto.add(cboxCategoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 160, 180, -1));

        jLabel2.setText("Precio");
        panelAbsoluto.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 190, -1, -1));

        jLabel3.setText("Categoría");
        panelAbsoluto.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 140, -1, -1));

        btnRemoverFiltro.setText("Remover");
        btnRemoverFiltro.setEnabled(false);
        btnRemoverFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverFiltroActionPerformed(evt);
            }
        });
        panelAbsoluto.add(btnRemoverFiltro, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 270, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelAbsoluto, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelAbsoluto, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tableProductosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableProductosMouseClicked
        // TODO add your handling code here:
        int seleccion = tableProductos.rowAtPoint(evt.getPoint());
        idProducto = tableProductos.getValueAt(seleccion, 2).toString();
    }//GEN-LAST:event_tableProductosMouseClicked

    private void btnFiltrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFiltrarActionPerformed
        // TODO add your handling code here:
        String categoria = cboxCategoria.getSelectedItem().toString();
        double pMinimo = 0;
        double pMaximo = Double.MAX_VALUE;
        if (!txtPrecioMinimo.getText().equals("Mínimo") || !txtPrecioMaximo.getText().equals("Máximo") || !categoria.equals("Seleccionar")) {
            if (!categoria.equals("Seleccionar")) {
                if (!txtPrecioMinimo.getText().isEmpty()) {
                    if (!txtPrecioMinimo.getText().equals("Mínimo")) {
                        if (validNums(txtPrecioMinimo.getText())) {
                            pMinimo = Double.parseDouble(txtPrecioMinimo.getText());
                        } else {
                            JOptionPane.showMessageDialog(this, "Por favor llene el campo de precio mínimo con caracteres correctos");
                        }
                    }
                }
                if (!txtPrecioMaximo.getText().isEmpty()) {
                    if (!txtPrecioMaximo.getText().equals("Máximo")) {
                        if (validNums(txtPrecioMaximo.getText())) {
                            pMaximo = Double.parseDouble(txtPrecioMaximo.getText());
                        } else {
                            JOptionPane.showMessageDialog(this, "Por favor llene el campo de precio máximo con caracteres correctos");
                        }
                    }
                }
                crearTabla(controlador.filtrarProductosUsuarioCategoriaPrecio(usuario, categoria, pMinimo, pMaximo));
                aplicarFiltro();
            } else {
                if (!txtPrecioMinimo.getText().isEmpty() && !txtPrecioMaximo.getText().isEmpty()) {
                    if (!txtPrecioMinimo.getText().equals("Mínimo")) {
                        if (validNums(txtPrecioMinimo.getText())) {
                            pMinimo = Double.parseDouble(txtPrecioMinimo.getText());
                        } else {
                            JOptionPane.showMessageDialog(this, "Por favor llene el campo de precio mínimo con caracteres correctos");
                        }
                    }
                    if (!txtPrecioMaximo.getText().equals("Máximo")) {
                        if (validNums(txtPrecioMaximo.getText())) {
                            pMaximo = Double.parseDouble(txtPrecioMaximo.getText());
                        } else {
                            JOptionPane.showMessageDialog(this, "Por favor llene el campo de precio máximo con caracteres correctos");
                        }
                    }
                    crearTabla(controlador.filtrarProductosUsuarioPrecio(usuario, pMinimo, pMaximo));
                    aplicarFiltro();
                }else{
                    JOptionPane.showMessageDialog(this, "Los campos de mínimo o máximo no pueden estar vacíos");
                    txtPrecioMinimo.setText("Mínimo");
                    txtPrecioMaximo.setText("Máximo");
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Ingresa una categoría, un precio minimo o maximo para filtrar");
        }
    }//GEN-LAST:event_btnFiltrarActionPerformed

    private void btnCarritoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCarritoActionPerformed
        // TODO add your handling code here:
        crearCarrito();
        
        PanelUsuarioCarrito p = new PanelUsuarioCarrito(usuario);
        p.setSize(700, 310);

        panelAbsoluto.removeAll();
        panelAbsoluto.add(p, new AbsoluteConstraints(0, 0, -1, -1));
        panelAbsoluto.revalidate();
        panelAbsoluto.repaint();
    }//GEN-LAST:event_btnCarritoActionPerformed

    private void btnDetallesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetallesActionPerformed
        // TODO add your handling code here:
        Producto aux = controlador.buscarProducto(idProducto);
        if(aux!=null){
            String disponibilidad = "NO";
            if(aux.isDisponible()){
                disponibilidad = "SI";
            }
            JOptionPane.showMessageDialog(this, "Id: "+ aux.getId() + "\nNombre: " + aux.getNombre()
                +"\nDescripcion: "+aux.getDesc() + "\nPrecio: $"+aux.getPrecio() + "\nCategoría: "+aux.getCategoria().getNombre()
                +"\nStock: "+aux.getStock()+"\nDisponible: "+disponibilidad + "\nVendedor: " + aux.getUsuario().getUser()
                +"\nFecha publicación: "+aux.getFechaPublicacion());
        }else{
            JOptionPane.showMessageDialog(this, "Seleeciona un producto para mostrar detalles");
        }
    }//GEN-LAST:event_btnDetallesActionPerformed

    private void btnAniadirCarritoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAniadirCarritoActionPerformed
        // TODO add your handling code here:
        crearCarrito();
        
        Carrito aux = controlador.buscarCarrito(usuario.getUser());
        Producto p = controlador.buscarProducto(idProducto);
        if (p != null) {
            boolean respuesta = aux.agregar(p);
            if (respuesta) {
                JOptionPane.showMessageDialog(this, "Producto añadido");
            } else {
                JOptionPane.showMessageDialog(this, "No se pudo añadir, ya tienes este producto en el carrito");
            }
        }else{
            JOptionPane.showMessageDialog(this, "Selecciona un producto para añadirlo al carrito");
        }
    }//GEN-LAST:event_btnAniadirCarritoActionPerformed

    private void btnRemoverFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverFiltroActionPerformed
        // TODO add your handling code here:
        mostrarTabla();
        txtPrecioMinimo.setText("Mínimo");
        txtPrecioMaximo.setText("Máximo");
        btnRemoverFiltro.setEnabled(false);
        btnRemoverFiltro.setVisible(false);
        btnFiltrar.setVisible(true);
        cboxCategoria.setEnabled(true);
        txtPrecioMinimo.setEnabled(true);
        txtPrecioMaximo.setEnabled(true);
    }//GEN-LAST:event_btnRemoverFiltroActionPerformed

    private void txtPrecioMinimoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtPrecioMinimoMouseClicked
        // TODO add your handling code here:
        txtPrecioMinimo.setText("");
    }//GEN-LAST:event_txtPrecioMinimoMouseClicked

    private void txtPrecioMaximoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtPrecioMaximoMouseClicked
        // TODO add your handling code here:
        txtPrecioMaximo.setText("");
    }//GEN-LAST:event_txtPrecioMaximoMouseClicked

    private void mostrarTabla(){
        crearTabla(controlador.costruirMatrisProductosDisponiblesUsuario(usuario));
    }
    private void crearTabla(String matris[][]){
        tableProductos.setModel(new javax.swing.table.DefaultTableModel(
            matris,
            new String [] {
                "Nombre", "Precio", "id"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
    }
    private void llenarBoxCategorias(){
        cboxCategoria.setModel(new DefaultComboBoxModel(controlador.obtenerCategoriasSeleccionar()));
    }
    private boolean validNums(String datos){
        return datos.matches("[0-9]*");
    }
    private void crearCarrito(){
        Carrito aux = controlador.buscarCarrito(usuario.getUser());
        if(aux == null){
            Carrito carrito = new Carrito(usuario);
            boolean respuesta = controlador.agregarCarrito(carrito);
        }
    }
    private void aplicarFiltro(){
        btnFiltrar.setVisible(false);
        btnRemoverFiltro.setEnabled(true);
        btnRemoverFiltro.setVisible(true);
        cboxCategoria.setEnabled(false);
        txtPrecioMinimo.setEnabled(false);
        txtPrecioMaximo.setEnabled(false);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAniadirCarrito;
    private javax.swing.JButton btnCarrito;
    private javax.swing.JButton btnDetalles;
    private javax.swing.JButton btnFiltrar;
    private javax.swing.JButton btnRemoverFiltro;
    private javax.swing.JComboBox<String> cboxCategoria;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBienvenida;
    private javax.swing.JPanel panelAbsoluto;
    private javax.swing.JTable tableProductos;
    private javax.swing.JTextField txtPrecioMaximo;
    private javax.swing.JTextField txtPrecioMinimo;
    // End of variables declaration//GEN-END:variables
}
